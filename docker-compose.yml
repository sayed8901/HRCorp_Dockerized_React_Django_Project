services:

  # Creating backend service from django project and Dockerfile
  django_backend:
    build:
      # Specifies the directory containing the Dockerfile for the backend
      context: ./django_backend
    
    # Docker can not directly access Django project. So here, I used 'gunicorn' (a production-ready WSGI server) to enable the docker to communicate with my django_backend project
    # The application is bound to 0.0.0.0:8000 to allow external access
    command: gunicorn HRCorp.wsgi --bind 0.0.0.0:8000

    # Maps the container's port 8000 to the host's port 8000 for backend accessibility
    ports:
      - 8000:8000
    
    # Environment variables for the backend to connect to the database
    # Here, I am using my supabase database credentials (as defined in the .env file of the HRCorp main project directory)
    environment:
      - POSTGRES_USER=postgres.fcgjhtzbzckcohxyrkre
      - POSTGRES_PASSWORD=pAXH43HOXW6q2kBq
      - POSTGRES_DB=postgres
  





  # Creating frontend service from django project and Dockerfile
  react_frontend:
    build:
      # Specifies the directory containing the Dockerfile for the frontend
      context: ./react_frontend
    
    # Creating a volume service from the react_frontend project..
    # This volume will be used in the nginx_frontend service to serve the frontend files
    volumes:
      - react_build:/react_frontend/dist
    


  
  # Creating nginx service to serve the React frontend (using the above created react_frontend)
  # Docker can not directly access our react_frontend service. So here, nginx is needed for viewing and interacting with our react_frontend service from the docker server.
  nginx_frontend:
    image: nginx:latest     # Uses the latest Nginx image from Docker Hub

    # Maps the container's port 80 to the host's port 8080 for live frontend service accessibility
    ports:
      - 80:8080
    
    # Mounts the custom Nginx configuration file for serving the react_frontend service
    volumes:
      - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro
      - react_build:/var/www/react_frontend
    
    # It ensures that, the Nginx service waits for the backend and React frontend to build before starting
    depends_on:
      - django_backend
      - react_frontend
  




# Defines a shared volume to store the React frontend build files (to the docker desktop)
volumes:
  react_build:    # This volume links the React frontend's build output to the Nginx container

